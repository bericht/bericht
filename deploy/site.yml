---
- hosts: webservers
  gather_facts: false
  sudo: true

  tasks:
  - name: Create user.
    user: name={{project_name}} state=present

  - name: Create the code directory.
    file: group={{project_name}} owner={{project_name}} mode=755 state=directory path={{project_root}}/code/

  - name: Install required system packages.
    apt: pkg="{{item}}" state=installed update-cache=yes
    with_items: system_packages

  - name: Install required Python packages.
    easy_install: name="{{item}}"
    with_items: python_packages

#  - name: Mount code folder.
#    mount: fstype=vboxsf opts=uid=${project_name},gid=${project_name} name=${project_root}/code/ src=${project_name} state=mounted
#    only_if: "$vm == 1"

#  - name: Create the SSH directory.
#    file: state=directory path=${project_root}/.ssh/

#  - name: Upload SSH known hosts.
#    copy: src=known_hosts dest=${project_root}/home/.ssh/known_hosts mode=0600

#  - name: Upload SSH key.
#    copy: src=key dest=${project_root}/home/.ssh/id_rsa mode=0600

#  - name: Upload SSH public key.
#    copy: src=files/ssl/${project_name}.key.encrypted dest=${project_root}/home/ssl/${project_name}.key

#  - name: Create the SSL directory.
#    file: state=directory path=${project_root}/ssl/

#  - name: Upload SSL private key.
#    copy: src=files/ssl/${project_name}.pem dest=${project_root}/ssl/${project_name}.pem

  - name: Change permissions.
    shell: chown -R {{project_name}}:{{project_name}} {{project_root}}


  - name: Install nginx configuration file.
    template: src=templates/nginx.conf.j2 dest=/etc/nginx/sites-enabled/{{project_name}}
    notify: restart nginx

  - name: Install supervisor configuration file.
    template: src=templates/supervisor.conf.j2 dest=/etc/supervisor/conf.d/{{project_name}}.conf
    notify: restart supervisor

  - name: Install gunicorn configuration file.
    template: src=templates/gunicorn.conf.j2 dest={{project_root}}/gunicorn.conf.py
    sudo_user: "{{project_name}}"
    notify: restart gunicorn


  - name: Pull sources from the repository.
    git: repo={{project_repo}} dest={{code_root}} version={{branch}}
    sudo_user: "{{project_name}}"
    notify:
      - restart gunicorn

  - name: Upload configuration.
    template: src=templates/live_settings.py.j2 dest={{code_root}}/local_settings.py
    sudo_user: "{{project_name}}"


  - name: Upgrade the virtualenv.
    pip: requirements={{code_root}}/requirements.txt virtualenv={{project_root}}/env/
    sudo_user: "{{project_name}}"

  - name: Install psycopg (python postgres driver)
    pip: name=psycopg2 version=2.5.3 virtualenv={{project_root}}/env/

  - name: Install gunicorn
    pip: name=gunicorn version=19.0.0 virtualenv={{project_root}}/env/
    notify:
      - restart gunicorn

  - name: Create database.
    shell: "{{project_root}}/env/bin/python {{code_root}}/manage.py sqlcreate --router=default | sudo -u postgres psql"

  - name: Sync Django database.
    shell: "{{project_root}}/env/bin/python {{code_root}}/manage.py syncdb --noinput"
    sudo_user: "{{project_name}}"

  - name: Migrate Django database.
    shell: "{{project_root}}/env/bin/python {{code_root}}/manage.py migrate --noinput"
    sudo_user: "{{project_name}}"

  - name: Collect Django media.
    shell: "{{project_root}}/env/bin/python {{code_root}}/manage.py collectstatic --noinput"
    sudo_user: "{{project_name}}"

  handlers:
    - include: handlers.yml
